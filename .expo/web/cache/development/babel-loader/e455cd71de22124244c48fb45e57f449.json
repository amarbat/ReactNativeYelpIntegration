{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/amarbat/Documents/Hicheel/Hobby/Udemy/ReactNative/Restaurant/food/src/screens/ResultsShowScreen.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport yelp from \"../api/yelp\";\n\nvar ResultsShowScreen = function ResultsShowScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      result = _useState2[0],\n      setResult = _useState2[1];\n\n  var id = navigation.getParam('id');\n\n  var getResult = function getResult(id) {\n    var response;\n    return _regeneratorRuntime.async(function getResult$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(yelp.get(\"/\" + id));\n\n          case 2:\n            response = _context.sent;\n            setResult(response.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getResult(id);\n  }, []);\n\n  if (!result) {\n    return null;\n  }\n\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, result.name), React.createElement(FlatList, {\n    data: result.photos,\n    keyExtractor: function keyExtractor(photo) {\n      return photo;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(Image, {\n        source: {\n          uri: item\n        },\n        style: styles.image,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 18\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  image: {\n    height: 200,\n    width: 300\n  }\n});\nexport default ResultsShowScreen;","map":{"version":3,"sources":["/Users/amarbat/Documents/Hicheel/Hobby/Udemy/ReactNative/Restaurant/food/src/screens/ResultsShowScreen.js"],"names":["React","useState","useEffect","yelp","ResultsShowScreen","navigation","result","setResult","id","getParam","getResult","get","response","data","name","photos","photo","item","uri","styles","image","StyleSheet","create","height","width"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;;AAEA,OAAOC,IAAP;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAAA,kBAChBJ,QAAQ,CAAE,IAAF,CADQ;AAAA;AAAA,MACrCK,MADqC;AAAA,MAC7BC,SAD6B;;AAE5C,MAAMC,EAAE,GAAGH,UAAU,CAACI,QAAX,CAAqB,IAArB,CAAX;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAOF,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACOL,IAAI,CAACQ,GAAL,OAAcH,EAAd,CADP;;AAAA;AACVI,YAAAA,QADU;AAEhBL,YAAAA,SAAS,CAAEK,QAAQ,CAACC,IAAX,CAAT;;AAFgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAKAX,EAAAA,SAAS,CAAE,YAAM;AACfQ,IAAAA,SAAS,CAACF,EAAD,CAAT;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAI,CAACF,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAED,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,MAAM,CAACQ,IADV,CADF,EAIE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAER,MAAM,CAACS,MADf;AAEE,IAAA,YAAY,EAAE,sBAACC,KAAD;AAAA,aAAWA,KAAX;AAAA,KAFhB;AAGE,IAAA,UAAU,EAAI,2BAAY;AAAA,UAAVC,IAAU,SAAVA,IAAU;AACxB,aAAO,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAE;AAACC,UAAAA,GAAG,EAAED;AAAN,SAAf;AAA4B,QAAA,KAAK,EAAEE,MAAM,CAACC,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAcD,CA/BD;;AAiCA,IAAMD,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAmB;AAChCF,EAAAA,KAAK,EAAE;AACLG,IAAAA,MAAM,EAAE,GADH;AAELC,IAAAA,KAAK,EAAE;AAFF;AADyB,CAAnB,CAAf;AAOA,eAAepB,iBAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {View,Text,StyleSheet, FlatList, Image} from 'react-native';\nimport yelp from '../api/yelp';\n\nconst ResultsShowScreen = ({ navigation }) => {\n  const [result, setResult] = useState (null);\n  const id = navigation.getParam ('id');\n\n  const getResult = async (id) => {\n    const response = await yelp.get (`/${id}`);\n    setResult (response.data);\n  };\n\n  useEffect (() => {\n    getResult(id);\n  }, []);\n\n  if (!result) {\n    return null;\n  }\n\n  return (\n    <View>\n      <Text>\n        {result.name}\n      </Text>\n      <FlatList\n        data={result.photos}\n        keyExtractor={(photo) => photo}\n        renderItem = {({item}) => {\n          return <Image source={{uri: item}} style={styles.image} />\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create ({\n  image: {\n    height: 200,\n    width: 300\n  }\n});\n\nexport default ResultsShowScreen;"]},"metadata":{},"sourceType":"module"}